"""Append test cases for patterns generated by xeger"""

import sys
from typing import Optional
import warnings

from timeout_decorator import timeout  # type: ignore
import xeger  # type: ignore

from cai4py.utils import escape, unescape


def safe_xeger(x: xeger.Xeger, pattern: str) -> Optional[str]:
    try:
        return timeout(10)(x.xeger)(pattern)  # type: ignore
    except Exception:  # pylint: disable=broad-except
        return None


def main() -> None:
    warnings.simplefilter(action="ignore", category=FutureWarning)
    x = xeger.Xeger()
    num_cases = 10

    for pattern in map(unescape, sys.stdin):
        try:
            inputs = []
            for _ in range(num_cases):
                result = safe_xeger(x, pattern)
                if result is None:
                    break
                inputs.append(result)
            if len(inputs) != num_cases:
                continue
            print(
                escape(pattern),
                "\t".join(map(escape, inputs)),
                sep="\t",
            )
        except Exception:  # pylint: disable=broad-except
            continue


if __name__ == "__main__":
    main()
