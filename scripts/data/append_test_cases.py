"""Append test cases for patterns generated by xeger"""

import json
import logging
import sys
from typing import Optional
import warnings

import timeout_decorator  # type: ignore
import xeger  # type: ignore


def main() -> None:
    warnings.simplefilter(action="ignore", category=FutureWarning)
    x = xeger.Xeger()
    num_cases = 10
    timeout = 60

    def get_texts(pattern: str) -> list[str]:
        def get_text(pattern: str) -> Optional[str]:
            try:
                return (  # type: ignore
                    timeout_decorator.timeout(timeout)(x.xeger)(pattern)
                )
            except Exception as e:  # pylint: disable=broad-exception-caught
                logging.warning(e)
                return None

        texts = [get_text(pattern) for _ in range(num_cases)]
        texts = list(set(texts))
        return list(filter(None, texts))

    patterns = map(str.rstrip, sys.stdin)
    for i, pattern in enumerate(patterns):
        texts = get_texts(pattern)
        if not texts:
            logging.warning("Line %d: No test cases", i)
            continue

        print(json.dumps(dict(pattern=pattern, texts=texts)), flush=True)


if __name__ == "__main__":
    main()
