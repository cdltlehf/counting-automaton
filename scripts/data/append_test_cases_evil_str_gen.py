"""Append test cases for patterns generated by EvilStrGen"""

from concurrent.futures import ThreadPoolExecutor
import json
import logging
import subprocess
import sys
import tempfile
from typing import Optional


def evil_str_gen(pattern: str, length: int, timeout: int) -> Optional[str]:
    pattern = f"^(?:{pattern})$"
    try:
        with (
            tempfile.NamedTemporaryFile() as input_file,
            tempfile.NamedTemporaryFile(suffix=".txt") as output_file,
        ):
            input_file.write(pattern.encode("utf-8"))
            input_file.flush()
            engine_types = {
                "RE2": 1,
                "RUST": 2,
                "GO": 3,
                "SRM": 4,
                "NonBacktracking": 5,
                "awk": 6,
                "grep": 7,
                "Hyperscan": 8,
                "Java": 9,
                "JavaScript": 10,
                "PCRE2": 11,
                "Perl": 12,
                "PHP": 13,
                "Python": 14,
                "Boost": 15,
                "Net": 16,
                "Backtracking": 17,
                # "NonBacktracking": 18,
            }
            cmd = [
                "EvilStrGen",
                input_file.name,
                output_file.name.removesuffix(".txt"),
                str(engine_types["NonBacktracking"]),
                str(length),
                "0",
            ]
            subprocess.run(
                cmd, check=True, stdout=subprocess.DEVNULL, timeout=timeout
            )
            test_case = output_file.read().decode("utf-8").strip()

            if test_case == "":
                logging.debug("Generated test case is empty")
                return None

            return test_case
    except Exception as e:  # pylint: disable=broad-exception-caught
        # TODO: EvilStrGen often print invalid continuation byte
        logging.warning(e)
        return None


def main() -> None:
    max_workers = 4
    num_cases = 10
    timeout = 60
    length = 1000

    def job(pattern: str) -> tuple[str, list[str]]:
        texts = [
            evil_str_gen(pattern, length, timeout) for _ in range(num_cases)
        ]
        texts = list(set(texts))
        return pattern, list(filter(None, texts))

    patterns = map(str.rstrip, sys.stdin)
    with ThreadPoolExecutor(max_workers) as executor:
        results = executor.map(job, patterns)
        for i, (pattern, texts) in enumerate(results):
            if not texts:
                logging.warning("Line %d: No test cases", i)
                continue

            print(json.dumps(dict(pattern=pattern, texts=texts)), flush=True)


if __name__ == "__main__":
    main()
