"""Append test cases for patterns generated by xeger"""

import logging
import subprocess
import sys
import tempfile

import timeout_decorator  # type: ignore

from cai4py.utils import escape
from cai4py.utils import unescape


def evil_str_gen(pattern: str, length: int) -> str:
    with tempfile.NamedTemporaryFile() as input_file:
        with tempfile.NamedTemporaryFile(suffix=".txt") as output_file:
            if "\n" in pattern:
                raise ValueError("Pattern contains newline character")
            pattern = f"^(?:{pattern})$"
            input_file.write(pattern.encode("utf-8"))
            input_file.flush()
            engine_types = {
                "RE2": 1,
                "RUST": 2,
                "GO": 3,
                "SRM": 4,
                "NonBacktracking": 5,
                "awk": 6,
                "grep": 7,
                "Hyperscan": 8,
                "Java": 9,
                "JavaScript": 10,
                "PCRE2": 11,
                "Perl": 12,
                "PHP": 13,
                "Python": 14,
                "Boost": 15,
                "Net": 16,
                "Backtracking": 17,
                # "NonBacktracking": 18,
            }
            subprocess.run(
                [
                    "EvilStrGen",
                    input_file.name,
                    output_file.name.removesuffix(".txt"),
                    str(engine_types["NonBacktracking"]),
                    str(length),
                    "0",
                ],
                check=True,
                stdout=subprocess.DEVNULL,
            )
            test_case = output_file.read().decode("utf-8").strip()
            if test_case == "":
                raise ValueError("Generated test case is empty")
            return test_case


def main() -> None:
    num_cases = 1
    timeout = 60
    length = 1000
    safe_evil_str_gen = timeout_decorator.timeout(timeout)(evil_str_gen)

    for i, pattern in enumerate(map(unescape, sys.stdin), 1):
        logging.warning("Processing %d-th pattern", i)
        try:
            inputs = []
            for _ in range(num_cases):
                result = safe_evil_str_gen(pattern, length)
                if result is None:
                    break
                inputs.append(result)
            if len(inputs) != num_cases:
                continue
            print(
                escape(pattern),
                "\t".join(map(escape, inputs)),
                sep="\t",
            )
        except Exception as e:  # pylint: disable=broad-except
            logging.warning(
                "Error generating string for pattern %s: %s", pattern, e
            )


if __name__ == "__main__":
    main()
